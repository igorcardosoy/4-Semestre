DROP DATABASE IF EXISTS TechnicalAssistance;

CREATE DATABASE TechnicalAssistance;

USE TechnicalAssistance;


CREATE TABLE ADDRESS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    STREET VARCHAR(60) NOT NULL,
    NUMBER VARCHAR(10) NOT NULL,
    COMPLEMENT VARCHAR(50),
    NEIGHBORHOOD VARCHAR(30) NOT NULL,
    CITY VARCHAR(25) NOT NULL,
    STATE VARCHAR(25) NOT NULL,
    ZIPCODE VARCHAR(9) NOT NULL
);

CREATE TABLE CUSTOMER (
  ID INT PRIMARY KEY AUTO_INCREMENT,
  CODE BIGINT NOT NULL UNIQUE,
  NAME VARCHAR(100) NOT NULL,
  EMAIL VARCHAR(100) NOT NULL,
  PHONE VARCHAR(20) NOT NULL,
  CPF VARCHAR(14) NOT NULL,
  ADDRESS_ID INT NOT NULL,

  FOREIGN KEY (ADDRESS_ID) REFERENCES ADDRESS(ID)
);

CREATE TABLE PAYMENT_METHOD (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    CODE BIGINT NOT NULL UNIQUE,
    NAME VARCHAR(50) NOT NULL
);

CREATE TABLE ORDER_STATUS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    CODE BIGINT NOT NULL UNIQUE,
    NAME VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE CUSTOMER_ORDER (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    CODE BIGINT NOT NULL UNIQUE,
    DESCRIPTION VARCHAR(100) NOT NULL,
    ISSUE_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    PRICE DECIMAL(10,2) NOT NULL,
    CUSTOMER_CODE BIGINT NOT NULL,
    PAYMENT_METHOD_CODE BIGINT NOT NULL,
    STATUS_CODE BIGINT NOT NULL,
    OBSERVATION VARCHAR(200),

    FOREIGN KEY (CUSTOMER_CODE) REFERENCES CUSTOMER(CODE),
    FOREIGN KEY (PAYMENT_METHOD_CODE) REFERENCES PAYMENT_METHOD(CODE),
    FOREIGN KEY (STATUS_CODE) REFERENCES ORDER_STATUS(CODE)
);


SELECT * FROM CUSTOMER;
SELECT * FROM ADDRESS;
SELECT * FROM ORDER_STATUS;
SELECT * FROM CUSTOMER_ORDER;